// VERTEX SHADER
#version 410
layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Velocity; 
layout(location = 2) in float Lifetime; 
layout(location = 3) in float Lifespan; 

out vec3 position; 
out vec3 velocity; 
out float lifetime; 
out float lifespan;

uniform float time; 
uniform float deltaTime; 
uniform float lifeMin; 
uniform float lifeMax;
uniform float velMin;
uniform float velMax;
uniform vec3 emitterPosition;
uniform sampler3D flowField;
uniform float fieldScale;

const float INVERSE_MAX_UINT = 1.0f / 4294967295.0f; 

float rand(uint seed, float range) 
{ 
	uint i = (seed ^ 12345391u) * 2654435769u; 
	i ^= (i << 6u) ^ (i >> 26u);
	i *= 2654435769u;
	i += (i << 5u) ^ (i >> 12u);
	return float(range * i) * INVERSE_MAX_UINT;
}

vec3 unsquish(vec3 x)
{
	return (x * 20) - vec3(10, 10, 10);
}

void main() 
{ 
	vec3 P = position = Position + Velocity * deltaTime;
	vec3 flowVel = unsquish(texture(flowField, ((P - emitterPosition)/(2*fieldScale)) + 0.5).xyz);
	velocity = Velocity + flowVel * deltaTime;
	lifetime = Lifetime + deltaTime; 
	lifespan = Lifespan; 
	// emit a new particle as soon as it dies 
	if (lifetime > lifespan) 
	{ 
		uint seed = uint(time * 1000.0) + uint(gl_VertexID); 
		velocity.x = rand(seed++, 2) - 1; 
		velocity.y = rand(seed++, 2) - 1; 
		velocity.z = rand(seed++, 2) - 1; 
		velocity = normalize(velocity);
		velocity *= velMin + ((rand(seed++, 2) - 1) * (velMax - velMin));
		position = emitterPosition; 
		lifetime = 0; 
		lifespan = rand(seed++, lifeMax - lifeMin) + lifeMin; 
	} 
}